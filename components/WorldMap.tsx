/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: ercandinsel (https://sketchfab.com/ercandinsel)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/2d-world-map-with-countries-74192acdc7a949f8bdae478d5da3ac6c
Title: 2D World Map With Countries
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    map_0: THREE.Mesh;
    map_1: THREE.Mesh;
    map_2: THREE.Mesh;
    map_3: THREE.Mesh;
    map_4: THREE.Mesh;
    map_5: THREE.Mesh;
    Plane_0: THREE.Mesh;
    Plane001_0: THREE.Mesh;
    map001_0: THREE.Mesh;
    map001_1: THREE.Mesh;
    map001_2: THREE.Mesh;
    map001_3: THREE.Mesh;
    map001_4: THREE.Mesh;
    map001_5: THREE.Mesh;
  };
  materials: {
    Color_1: THREE.MeshStandardMaterial;
    Color_2: THREE.MeshStandardMaterial;
    Color_3: THREE.MeshStandardMaterial;
    Color_4: THREE.MeshStandardMaterial;
    Color5: THREE.MeshStandardMaterial;
    Antartika: THREE.MeshStandardMaterial;
    Material: THREE.MeshStandardMaterial;
  };
};

export function WorldMap(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/world_map.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group
          position={[0.673, 0, 1.332]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.018}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_0.geometry}
            material={materials.Color_1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_1.geometry}
            material={materials.Color_2}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_2.geometry}
            material={materials.Color_3}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_3.geometry}
            material={materials.Color_4}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4.geometry}
            material={materials.Color5}
          />
          {/* Antarctica Top  */}
          {/* <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_5.geometry}
            material={materials.Antartika}
          /> */}
        </group>
        <group position={[0.673, -1.28, -2.621]} scale={0.018}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map001_0.geometry}
            material={materials.Color_1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map001_1.geometry}
            material={materials.Color_2}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map001_2.geometry}
            material={materials.Color_3}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map001_3.geometry}
            material={materials.Color_4}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map001_4.geometry}
            material={materials.Color5}
          />
          {/* Antarctica Bottom */}
          {/* <mesh
            castShadow
            receiveShadow
            geometry={nodes.map001_5.geometry}
            material={materials.Antartika}
          /> */}
        </group>
        {/* Sea Top */}
        {/* <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane_0.geometry}
          material={materials.Material}
          position={[0.292, 0.004, 0]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={[4.971, 2.616, 2.616]}
        /> */}
        {/* Sea Bottom */}
        {/* <mesh
          castShadow
          receiveShadow
          geometry={nodes.Plane001_0.geometry}
          material={materials.Material}
          position={[0.292, -2.613, -2.625]}
          scale={[4.971, 2.616, 2.616]}
        /> */}
      </group>
    </group>
  );
}

useGLTF.preload("/models/world_map.glb");
